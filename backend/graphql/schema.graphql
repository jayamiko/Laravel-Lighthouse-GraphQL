type User {
    id: ID!
    name: String!
    email: String!
}

type Post {
    id: ID!
    title: String!
    content: String!
    user: User! @belongsTo
    created_at: DateTime
    updated_at: DateTime
}

type AuthPayload {
    token: String!
}

type Query {
    me: User @guard @auth
    posts: [Post!]! @field(resolver: "App\\GraphQL\\Queries\\PostsQuery")
    post(id: ID!): Post @field(resolver: "App\\GraphQL\\Queries\\PostByIdQuery")
}

type Mutation {
    register(name: String!, email: String!, password: String!): String!
        @field(resolver: "App\\GraphQL\\Mutations\\Register")
    login(email: String!, password: String!): AuthPayload!
        @field(resolver: "App\\GraphQL\\Mutations\\Login")
    createPost(title: String!, content: String!): String!
        @field(resolver: "App\\GraphQL\\Mutations\\CreatePostMutation")
    updatePost(id: ID!, title: String!, content: String!): String!
        @field(resolver: "App\\GraphQL\\Mutations\\UpdatePostMutation")
    deletePost(id: ID!): String!
        @field(resolver: "App\\GraphQL\\Mutations\\DeletePostMutation")
}
